

/*
 * Copyright 2020 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/* This file is automatically generated using bindtool */

#ifndef INCLUDED_GR_FILTER_IIR_FILTER_PYTHON_HPP
#define INCLUDED_GR_FILTER_IIR_FILTER_PYTHON_HPP

#include <gnuradio/filter/iir_filter.h>

void bind_iir_filter(py::module& m)
{
    using iir_filter<std::complex<float>, std::complex<float>, float, std::complex<float> >    = gr::filter::iir_filter<std::complex<float>, std::complex<float>, float, std::complex<float> >;
    using iir_filter<std::complex<float>, std::complex<float>, double, std::complex<double> >    = gr::filter::iir_filter<std::complex<float>, std::complex<float>, double, std::complex<double> >;
    using iir_filter<std::complex<float>, std::complex<float>, std::complex<double>, std::complex<double> >    = gr::filter::iir_filter<std::complex<float>, std::complex<float>, std::complex<double>, std::complex<double> >;


    py::class_<iir_filter<std::complex<float>, std::complex<float>, float, std::complex<float> >,
        std::shared_ptr<iir_filter<std::complex<float>, std::complex<float>, float, std::complex<float> >>>(m, "iir_filter<std::complex<float>, std::complex<float>, float, std::complex<float> >")


        .def("filter",&iir_filter<std::complex<float>, std::complex<float>, float, std::complex<float> >::filter,
            py::arg("input") 
        )
        .def("filter_n",&iir_filter<std::complex<float>, std::complex<float>, float, std::complex<float> >::filter_n,
            py::arg("output"), 
            py::arg("input"), 
            py::arg("n") 
        )
        .def("ntaps_ff",&iir_filter<std::complex<float>, std::complex<float>, float, std::complex<float> >::ntaps_ff)
        .def("ntaps_fb",&iir_filter<std::complex<float>, std::complex<float>, float, std::complex<float> >::ntaps_fb)
        .def("set_taps",&iir_filter<std::complex<float>, std::complex<float>, float, std::complex<float> >::set_taps,
            py::arg("fftaps"), 
            py::arg("fbtaps") 
        )
        .def("to_basic_block",[](std::shared_ptr<iir_filter> p){
            return p->to_basic_block();
        })
        ;


    py::class_<iir_filter<std::complex<float>, std::complex<float>, double, std::complex<double> >,
        std::shared_ptr<iir_filter<std::complex<float>, std::complex<float>, double, std::complex<double> >>>(m, "iir_filter<std::complex<float>, std::complex<float>, double, std::complex<double> >")


        .def("filter",&iir_filter<std::complex<float>, std::complex<float>, double, std::complex<double> >::filter,
            py::arg("input") 
        )
        .def("filter_n",&iir_filter<std::complex<float>, std::complex<float>, double, std::complex<double> >::filter_n,
            py::arg("output"), 
            py::arg("input"), 
            py::arg("n") 
        )
        .def("ntaps_ff",&iir_filter<std::complex<float>, std::complex<float>, double, std::complex<double> >::ntaps_ff)
        .def("ntaps_fb",&iir_filter<std::complex<float>, std::complex<float>, double, std::complex<double> >::ntaps_fb)
        .def("set_taps",&iir_filter<std::complex<float>, std::complex<float>, double, std::complex<double> >::set_taps,
            py::arg("fftaps"), 
            py::arg("fbtaps") 
        )
        .def("to_basic_block",[](std::shared_ptr<iir_filter> p){
            return p->to_basic_block();
        })
        ;


    py::class_<iir_filter<std::complex<float>, std::complex<float>, std::complex<double>, std::complex<double> >,
        std::shared_ptr<iir_filter<std::complex<float>, std::complex<float>, std::complex<double>, std::complex<double> >>>(m, "iir_filter<std::complex<float>, std::complex<float>, std::complex<double>, std::complex<double> >")


        .def("filter",&iir_filter<std::complex<float>, std::complex<float>, std::complex<double>, std::complex<double> >::filter,
            py::arg("input") 
        )
        .def("filter_n",&iir_filter<std::complex<float>, std::complex<float>, std::complex<double>, std::complex<double> >::filter_n,
            py::arg("output"), 
            py::arg("input"), 
            py::arg("n") 
        )
        .def("ntaps_ff",&iir_filter<std::complex<float>, std::complex<float>, std::complex<double>, std::complex<double> >::ntaps_ff)
        .def("ntaps_fb",&iir_filter<std::complex<float>, std::complex<float>, std::complex<double>, std::complex<double> >::ntaps_fb)
        .def("set_taps",&iir_filter<std::complex<float>, std::complex<float>, std::complex<double>, std::complex<double> >::set_taps,
            py::arg("fftaps"), 
            py::arg("fbtaps") 
        )
        .def("to_basic_block",[](std::shared_ptr<iir_filter> p){
            return p->to_basic_block();
        })
        ;


} 

#endif /* INCLUDED_GR_FILTER_IIR_FILTER_PYTHON_HPP */
