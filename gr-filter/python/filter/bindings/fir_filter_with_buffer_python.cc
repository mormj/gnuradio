/*
 * Copyright 2020 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/* This file is automatically generated using bindtool */

#include <pybind11/pybind11.h>
#include <pybind11/complex.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <gnuradio/filter/fir_filter_with_buffer.h>

void bind_fir_filter_with_buffer(py::module& m)
{
    using fir_filter_with_buffer_fff    = gr::filter::kernel::fir_filter_with_buffer_fff;
    using fir_filter_with_buffer_ccc    = gr::filter::kernel::fir_filter_with_buffer_ccc;
    using fir_filter_with_buffer_ccf    = gr::filter::kernel::fir_filter_with_buffer_ccf;


    py::class_<fir_filter_with_buffer_fff,
        std::shared_ptr<fir_filter_with_buffer_fff>>(m, "fir_filter_with_buffer_fff")

        .def(py::init<std::vector<float, std::allocator<float> > const &>(),           py::arg("taps") 
        )
        .def(py::init<gr::filter::kernel::fir_filter_with_buffer_fff const &>(),           py::arg("arg0") 
        )

        .def("filter",(float (fir_filter_with_buffer_fff::*)(float)) &fir_filter_with_buffer_fff::filter,
            py::arg("input") 
        )
        .def("filter",(float (fir_filter_with_buffer_fff::*)(const float [], unsigned long)) &fir_filter_with_buffer_fff::filter,
            py::arg("input"), 
            py::arg("dec") 
        )
        .def("filterN",&fir_filter_with_buffer_fff::filterN,
            py::arg("output"), 
            py::arg("input"), 
            py::arg("n") 
        )
        .def("filterNdec",&fir_filter_with_buffer_fff::filterNdec,
            py::arg("output"), 
            py::arg("input"), 
            py::arg("n"), 
            py::arg("decimate") 
        )
        .def("ntaps",&fir_filter_with_buffer_fff::ntaps)
        .def("set_taps",&fir_filter_with_buffer_fff::set_taps,
            py::arg("taps") 
        )
        .def("taps",&fir_filter_with_buffer_fff::taps)
        ;


    py::class_<fir_filter_with_buffer_ccc,
        std::shared_ptr<fir_filter_with_buffer_ccc>>(m, "fir_filter_with_buffer_ccc")

        .def(py::init<std::vector<std::complex<float>, std::allocator<std::complex<float> > > const &>(),           py::arg("taps") 
        )
        .def(py::init<gr::filter::kernel::fir_filter_with_buffer_ccc const &>(),           py::arg("arg0") 
        )

        .def("filter", (gr_complex (fir_filter_with_buffer_ccc::*)(gr_complex)) &fir_filter_with_buffer_ccc::filter,
            py::arg("input") 
        )
        .def("filter", (gr_complex (fir_filter_with_buffer_ccc::*)(const gr_complex [], unsigned long)) &fir_filter_with_buffer_ccc::filter,
            py::arg("input"), 
            py::arg("dec") 
        )
        .def("filterN",&fir_filter_with_buffer_ccc::filterN,
            py::arg("output"), 
            py::arg("input"), 
            py::arg("n") 
        )
        .def("filterNdec",&fir_filter_with_buffer_ccc::filterNdec,
            py::arg("output"), 
            py::arg("input"), 
            py::arg("n"), 
            py::arg("decimate") 
        )
        .def("ntaps",&fir_filter_with_buffer_ccc::ntaps)
        .def("set_taps",&fir_filter_with_buffer_ccc::set_taps,
            py::arg("taps") 
        )
        .def("taps",&fir_filter_with_buffer_ccc::taps)
        ;


    py::class_<fir_filter_with_buffer_ccf,
        std::shared_ptr<fir_filter_with_buffer_ccf>>(m, "fir_filter_with_buffer_ccf")

        .def(py::init<std::vector<float, std::allocator<float> > const &>(),           py::arg("taps") 
        )
        .def(py::init<gr::filter::kernel::fir_filter_with_buffer_ccf const &>(),           py::arg("arg0") 
        )

        .def("filter", (gr_complex (fir_filter_with_buffer_ccf::*)(gr_complex)) &fir_filter_with_buffer_ccf::filter,
            py::arg("input") 
        )
        .def("filter", (gr_complex (fir_filter_with_buffer_ccf::*)(const gr_complex [], unsigned long))&fir_filter_with_buffer_ccf::filter,
            py::arg("input"), 
            py::arg("dec") 
        )
        .def("filterN",&fir_filter_with_buffer_ccf::filterN,
            py::arg("output"), 
            py::arg("input"), 
            py::arg("n") 
        )
        .def("filterNdec",&fir_filter_with_buffer_ccf::filterNdec,
            py::arg("output"), 
            py::arg("input"), 
            py::arg("n"), 
            py::arg("decimate") 
        )
        .def("ntaps",&fir_filter_with_buffer_ccf::ntaps)
        .def("set_taps",&fir_filter_with_buffer_ccf::set_taps,
            py::arg("taps") 
        )
        .def("taps",&fir_filter_with_buffer_ccf::taps)
        ;


} 
