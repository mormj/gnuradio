/*
 * Copyright 2020 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/* This file is automatically generated using bindtool */

#include <pybind11/pybind11.h>
#include <pybind11/complex.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <gnuradio/filter/pfb_arb_resampler.h>

void bind_pfb_arb_resampler(py::module& m)
{
    using pfb_arb_resampler_ccf    = gr::filter::pfb_arb_resampler_ccf;
    using pfb_arb_resampler_ccc    = gr::filter::pfb_arb_resampler_ccc;
    using pfb_arb_resampler_fff    = gr::filter::pfb_arb_resampler_fff;


    py::class_<pfb_arb_resampler_ccf,
        std::shared_ptr<pfb_arb_resampler_ccf>>(m, "pfb_arb_resampler_ccf")

        .def(py::init<float,std::vector<float, std::allocator<float> > const &,unsigned int>(),           py::arg("rate"), 
           py::arg("taps"), 
           py::arg("filter_size") 
        )
        .def(py::init<gr::filter::kernel::pfb_arb_resampler_ccf const &>(),           py::arg("arg0") 
        )

        .def("set_taps",&pfb_arb_resampler_ccf::set_taps,
            py::arg("taps") 
        )
        .def("taps",&pfb_arb_resampler_ccf::taps)
        .def("print_taps",&pfb_arb_resampler_ccf::print_taps)
        .def("set_rate",&pfb_arb_resampler_ccf::set_rate,
            py::arg("rate") 
        )
        .def("set_phase",&pfb_arb_resampler_ccf::set_phase,
            py::arg("ph") 
        )
        .def("phase",&pfb_arb_resampler_ccf::phase)
        .def("taps_per_filter",&pfb_arb_resampler_ccf::taps_per_filter)
        .def("interpolation_rate",&pfb_arb_resampler_ccf::interpolation_rate)
        .def("decimation_rate",&pfb_arb_resampler_ccf::decimation_rate)
        .def("fractional_rate",&pfb_arb_resampler_ccf::fractional_rate)
        .def("group_delay",&pfb_arb_resampler_ccf::group_delay)
        .def("phase_offset",&pfb_arb_resampler_ccf::phase_offset,
            py::arg("freq"), 
            py::arg("fs") 
        )
        .def("filter",&pfb_arb_resampler_ccf::filter,
            py::arg("output"), 
            py::arg("input"), 
            py::arg("n_to_read"), 
            py::arg("n_read") 
        )
        .def("to_basic_block",[](std::shared_ptr<pfb_arb_resampler> p){
            return p->to_basic_block();
        })
        ;


    py::class_<pfb_arb_resampler_ccc,
        std::shared_ptr<pfb_arb_resampler_ccc>>(m, "pfb_arb_resampler_ccc")

        .def(py::init<float,std::vector<std::complex<float>, std::allocator<std::complex<float> > > const &,unsigned int>(),           py::arg("rate"), 
           py::arg("taps"), 
           py::arg("filter_size") 
        )
        .def(py::init<gr::filter::kernel::pfb_arb_resampler_ccc const &>(),           py::arg("arg0") 
        )

        .def("set_taps",&pfb_arb_resampler_ccc::set_taps,
            py::arg("taps") 
        )
        .def("taps",&pfb_arb_resampler_ccc::taps)
        .def("print_taps",&pfb_arb_resampler_ccc::print_taps)
        .def("set_rate",&pfb_arb_resampler_ccc::set_rate,
            py::arg("rate") 
        )
        .def("set_phase",&pfb_arb_resampler_ccc::set_phase,
            py::arg("ph") 
        )
        .def("phase",&pfb_arb_resampler_ccc::phase)
        .def("taps_per_filter",&pfb_arb_resampler_ccc::taps_per_filter)
        .def("interpolation_rate",&pfb_arb_resampler_ccc::interpolation_rate)
        .def("decimation_rate",&pfb_arb_resampler_ccc::decimation_rate)
        .def("fractional_rate",&pfb_arb_resampler_ccc::fractional_rate)
        .def("group_delay",&pfb_arb_resampler_ccc::group_delay)
        .def("phase_offset",&pfb_arb_resampler_ccc::phase_offset,
            py::arg("freq"), 
            py::arg("fs") 
        )
        .def("filter",&pfb_arb_resampler_ccc::filter,
            py::arg("output"), 
            py::arg("input"), 
            py::arg("n_to_read"), 
            py::arg("n_read") 
        )
        .def("to_basic_block",[](std::shared_ptr<pfb_arb_resampler> p){
            return p->to_basic_block();
        })
        ;


    py::class_<pfb_arb_resampler_fff,
        std::shared_ptr<pfb_arb_resampler_fff>>(m, "pfb_arb_resampler_fff")

        .def(py::init<float,std::vector<float, std::allocator<float> > const &,unsigned int>(),           py::arg("rate"), 
           py::arg("taps"), 
           py::arg("filter_size") 
        )
        .def(py::init<gr::filter::kernel::pfb_arb_resampler_fff const &>(),           py::arg("arg0") 
        )

        .def("set_taps",&pfb_arb_resampler_fff::set_taps,
            py::arg("taps") 
        )
        .def("taps",&pfb_arb_resampler_fff::taps)
        .def("print_taps",&pfb_arb_resampler_fff::print_taps)
        .def("set_rate",&pfb_arb_resampler_fff::set_rate,
            py::arg("rate") 
        )
        .def("set_phase",&pfb_arb_resampler_fff::set_phase,
            py::arg("ph") 
        )
        .def("phase",&pfb_arb_resampler_fff::phase)
        .def("taps_per_filter",&pfb_arb_resampler_fff::taps_per_filter)
        .def("interpolation_rate",&pfb_arb_resampler_fff::interpolation_rate)
        .def("decimation_rate",&pfb_arb_resampler_fff::decimation_rate)
        .def("fractional_rate",&pfb_arb_resampler_fff::fractional_rate)
        .def("group_delay",&pfb_arb_resampler_fff::group_delay)
        .def("phase_offset",&pfb_arb_resampler_fff::phase_offset,
            py::arg("freq"), 
            py::arg("fs") 
        )
        .def("filter",&pfb_arb_resampler_fff::filter,
            py::arg("output"), 
            py::arg("input"), 
            py::arg("n_to_read"), 
            py::arg("n_read") 
        )
        .def("to_basic_block",[](std::shared_ptr<pfb_arb_resampler> p){
            return p->to_basic_block();
        })
        ;


} 
