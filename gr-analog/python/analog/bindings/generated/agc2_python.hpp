

/*
 * Copyright 2020 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/* This file is automatically generated using bindtool */

#ifndef INCLUDED_GR_ANALOG_AGC2_PYTHON_HPP
#define INCLUDED_GR_ANALOG_AGC2_PYTHON_HPP

#include <gnuradio/analog/agc2.h>

void bind_agc2(py::module& m)
{
    using agc2_cc    = gr::analog::agc2_cc;
    using agc2_ff    = gr::analog::agc2_ff;


    py::class_<agc2_cc,
        std::shared_ptr<agc2_cc>>(m, "agc2_cc")

        .def(py::init<float,float,float,float,float>(),           py::arg("attack_rate") = 0.10000000000000001, 
           py::arg("decay_rate") = 0.01, 
           py::arg("reference") = 1., 
           py::arg("gain") = 1., 
           py::arg("max_gain") = 0. 
        )
        .def(py::init<gr::analog::kernel::agc2_cc const &>(),           py::arg("arg0") 
        )

        .def("decay_rate",&agc2_cc::decay_rate)
        .def("attack_rate",&agc2_cc::attack_rate)
        .def("reference",&agc2_cc::reference)
        .def("gain",&agc2_cc::gain)
        .def("max_gain",&agc2_cc::max_gain)
        .def("set_decay_rate",&agc2_cc::set_decay_rate,
            py::arg("rate") 
        )
        .def("set_attack_rate",&agc2_cc::set_attack_rate,
            py::arg("rate") 
        )
        .def("set_reference",&agc2_cc::set_reference,
            py::arg("reference") 
        )
        .def("set_gain",&agc2_cc::set_gain,
            py::arg("gain") 
        )
        .def("set_max_gain",&agc2_cc::set_max_gain,
            py::arg("max_gain") 
        )
        .def("scale",&agc2_cc::scale,
            py::arg("input") 
        )
        .def("scaleN",&agc2_cc::scaleN,
            py::arg("output"), 
            py::arg("input"), 
            py::arg("n") 
        )
        .def("to_basic_block",[](std::shared_ptr<agc2> p){
            return p->to_basic_block();
        })
        ;


    py::class_<agc2_ff,
        std::shared_ptr<agc2_ff>>(m, "agc2_ff")

        .def(py::init<float,float,float,float,float>(),           py::arg("attack_rate") = 0.10000000000000001, 
           py::arg("decay_rate") = 0.01, 
           py::arg("reference") = 1., 
           py::arg("gain") = 1., 
           py::arg("max_gain") = 0. 
        )
        .def(py::init<gr::analog::kernel::agc2_ff const &>(),           py::arg("arg0") 
        )

        .def("attack_rate",&agc2_ff::attack_rate)
        .def("decay_rate",&agc2_ff::decay_rate)
        .def("reference",&agc2_ff::reference)
        .def("gain",&agc2_ff::gain)
        .def("max_gain",&agc2_ff::max_gain)
        .def("set_attack_rate",&agc2_ff::set_attack_rate,
            py::arg("rate") 
        )
        .def("set_decay_rate",&agc2_ff::set_decay_rate,
            py::arg("rate") 
        )
        .def("set_reference",&agc2_ff::set_reference,
            py::arg("reference") 
        )
        .def("set_gain",&agc2_ff::set_gain,
            py::arg("gain") 
        )
        .def("set_max_gain",&agc2_ff::set_max_gain,
            py::arg("max_gain") 
        )
        .def("scale",&agc2_ff::scale,
            py::arg("input") 
        )
        .def("scaleN",&agc2_ff::scaleN,
            py::arg("output"), 
            py::arg("input"), 
            py::arg("n") 
        )
        .def("to_basic_block",[](std::shared_ptr<agc2> p){
            return p->to_basic_block();
        })
        ;


} 

#endif /* INCLUDED_GR_ANALOG_AGC2_PYTHON_HPP */
