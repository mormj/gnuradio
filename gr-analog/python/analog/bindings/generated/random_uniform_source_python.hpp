

/*
 * Copyright 2020 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/* This file is automatically generated using bindtool */

#ifndef INCLUDED_GR_ANALOG_RANDOM_UNIFORM_SOURCE_PYTHON_HPP
#define INCLUDED_GR_ANALOG_RANDOM_UNIFORM_SOURCE_PYTHON_HPP

#include <gnuradio/analog/random_uniform_source.h>

template<typename T>
void bind_random_uniform_source_template(py::module& m, const char *classname)
{
    using random_uniform_source      = gr::analog::random_uniform_source<T>;

    py::class_<random_uniform_source, gr::sync_block, std::shared_ptr<random_uniform_source>>(m, classname)
        .def(py::init(&gr::analog::random_uniform_source<T>::make),
            py::arg("minimum"),
            py::arg("maximum"),
            py::arg("seed")
        )

        .def("to_basic_block",[](std::shared_ptr<random_uniform_source> p){
            return p->to_basic_block();
        })
        ;
} 

void bind_random_uniform_source(py::module& m)
{
    bind_random_uniform_source_template<std::uint8_t>(m,"random_uniform_source_b");
    bind_random_uniform_source_template<std::int16_t>(m,"random_uniform_source_s");
    bind_random_uniform_source_template<std::int32_t>(m,"random_uniform_source_i");
} 

#endif /* INCLUDED_GR_ANALOG_RANDOM_UNIFORM_SOURCE_PYTHON_HPP */
