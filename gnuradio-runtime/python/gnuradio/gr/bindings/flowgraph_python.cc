/*
 * Copyright 2020 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/* This file is automatically generated using bindtool */

#include <pybind11/pybind11.h>
#include <pybind11/complex.h>
#include <pybind11/stl.h>
// #include <pybind11/string.h>

namespace py = pybind11;

#include <gnuradio/flowgraph.h>

void bind_flowgraph(py::module& m)
{
    using flowgraph    = gr::flowgraph;
    using endpoint    = gr::endpoint;
    using msg_endpoint    = gr::msg_endpoint;
    using edge    = gr::edge;
    using msg_edge    = gr::msg_edge;


    py::class_<flowgraph,
        std::shared_ptr<flowgraph>>(m, "flowgraph")

        .def(py::init<gr::flowgraph const &>(),           py::arg("arg0") 
        )

        .def("connect",(void (flowgraph::*)(gr::endpoint const &, gr::endpoint const &))&flowgraph::connect,
            py::arg("src"), 
            py::arg("dst") 
        )
        .def("disconnect",(void (flowgraph::*)(gr::endpoint const &, gr::endpoint const &))&flowgraph::disconnect,
            py::arg("src"), 
            py::arg("dst") 
        )
        .def("connect",(void (flowgraph::*)(gr::basic_block_sptr, int, gr::basic_block_sptr, int))&flowgraph::connect,
            py::arg("src_block"), 
            py::arg("src_port"), 
            py::arg("dst_block"), 
            py::arg("dst_port") 
        )
        .def("disconnect",(void (flowgraph::*)(gr::basic_block_sptr, int, gr::basic_block_sptr, int))&flowgraph::disconnect,
            py::arg("src_block"), 
            py::arg("src_port"), 
            py::arg("dst_block"), 
            py::arg("dst_port") 
        )
        .def("connect",(void (flowgraph::*)(gr::msg_endpoint const &, gr::msg_endpoint const &))&flowgraph::connect,
            py::arg("src"), 
            py::arg("dst") 
        )
        .def("disconnect",(void (flowgraph::*)(gr::msg_endpoint const &, gr::msg_endpoint const &))&flowgraph::disconnect,
            py::arg("src"), 
            py::arg("dst") 
        )
        .def("validate",&flowgraph::validate)
        .def("clear",&flowgraph::clear)
        .def("edges",&flowgraph::edges)
        .def("msg_edges",&flowgraph::msg_edges)
        .def("calc_used_blocks",&flowgraph::calc_used_blocks)
        .def("topological_sort",&flowgraph::topological_sort,
            py::arg("blocks") 
        )
        .def("partition",&flowgraph::partition)
        ;


    py::class_<endpoint,
        std::shared_ptr<endpoint>>(m, "endpoint")

        .def(py::init<>())
        .def(py::init<gr::basic_block_sptr,int>(),           py::arg("block"), 
           py::arg("port") 
        )
        .def(py::init<gr::endpoint const &>(),           py::arg("arg0") 
        )

        .def("block",&endpoint::block)
        .def("port",&endpoint::port)
        .def("identifier",&endpoint::identifier)
        ;


    py::class_<msg_endpoint,
        std::shared_ptr<msg_endpoint>>(m, "msg_endpoint")

        .def(py::init<>())
        .def(py::init<gr::basic_block_sptr,pmt::pmt_t,bool>(),           py::arg("block"), 
           py::arg("port"), 
           py::arg("is_hier") = false 
        )
        .def(py::init<gr::msg_endpoint const &>(),           py::arg("arg0") 
        )

        .def("block",&msg_endpoint::block)
        .def("port",&msg_endpoint::port)
        .def("is_hier",&msg_endpoint::is_hier)
        .def("set_hier",&msg_endpoint::set_hier,
            py::arg("h") 
        )
        .def("identifier",&msg_endpoint::identifier)
        ;


    py::class_<edge,
        std::shared_ptr<edge>>(m, "edge")

        .def(py::init<>())
        .def(py::init<gr::endpoint const &,gr::endpoint const &>(),           py::arg("src"), 
           py::arg("dst") 
        )
        .def(py::init<gr::edge const &>(),           py::arg("arg0") 
        )

        .def("src",&edge::src)
        .def("dst",&edge::dst)
        .def("identifier",&edge::identifier)
        ;


    py::class_<msg_edge,
        std::shared_ptr<msg_edge>>(m, "msg_edge")

        .def(py::init<>())
        .def(py::init<gr::msg_endpoint const &,gr::msg_endpoint const &>(),           py::arg("src"), 
           py::arg("dst") 
        )
        .def(py::init<gr::msg_edge const &>(),           py::arg("arg0") 
        )

        .def("src",&msg_edge::src)
        .def("dst",&msg_edge::dst)
        .def("identifier",&msg_edge::identifier)
        ;


    m.def("make_flowgraph",&gr::make_flowgraph);
    // m.def("dot_graph_fg",&gr::dot_graph_fg,
    //     py::arg("fg") 
    // );
} 
