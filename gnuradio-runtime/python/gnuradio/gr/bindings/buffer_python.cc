/*
 * Copyright 2020 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/* This file is automatically generated using bindtool */

#include <pybind11/pybind11.h>
#include <pybind11/complex.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <gnuradio/buffer.h>
#include <gnuradio/block.h>

void bind_buffer(py::module& m)
{
    using buffer    = gr::buffer;
    using buffer_reader    = gr::buffer_reader;


    py::class_<buffer,
        std::shared_ptr<buffer>>(m, "buffer")


        .def("space_available",&buffer::space_available)
        .def("bufsize",&buffer::bufsize)
        .def("base",&buffer::base)
        .def("write_pointer",&buffer::write_pointer)
        .def("update_write_pointer",&buffer::update_write_pointer,
            py::arg("nitems") 
        )
        .def("set_done",&buffer::set_done,
            py::arg("done") 
        )
        .def("done",&buffer::done)
        .def("link",&buffer::link)
        .def("nreaders",&buffer::nreaders)
        .def("reader",&buffer::reader,
            py::arg("index") 
        )
        .def("mutex",&buffer::mutex)
        .def("nitems_written",&buffer::nitems_written)
        .def("reset_nitem_counter",&buffer::reset_nitem_counter)
        .def("get_sizeof_item",&buffer::get_sizeof_item)
        .def("add_item_tag",&buffer::add_item_tag,
            py::arg("tag") 
        )
        .def("remove_item_tag",&buffer::remove_item_tag,
            py::arg("tag"), 
            py::arg("id") 
        )
        .def("prune_tags",&buffer::prune_tags,
            py::arg("max_time") 
        )
        .def("get_tags_begin",&buffer::get_tags_begin)
        .def("get_tags_end",&buffer::get_tags_end)
        .def("get_tags_lower_bound",&buffer::get_tags_lower_bound,
            py::arg("x") 
        )
        .def("get_tags_upper_bound",&buffer::get_tags_upper_bound,
            py::arg("x") 
        )
        ;


    py::class_<buffer_reader,
        std::shared_ptr<buffer_reader>>(m, "buffer_reader")

        .def(py::init<gr::buffer_reader const &>(),           py::arg("arg0") 
        )

        .def("declare_sample_delay",&buffer_reader::declare_sample_delay,
            py::arg("delay") 
        )
        .def("sample_delay",&buffer_reader::sample_delay)
        .def("items_available",&buffer_reader::items_available)
        .def("buffer",&buffer_reader::buffer)
        .def("max_possible_items_available",&buffer_reader::max_possible_items_available)
        .def("read_pointer",&buffer_reader::read_pointer)
        .def("update_read_pointer",&buffer_reader::update_read_pointer,
            py::arg("nitems") 
        )
        .def("set_done",&buffer_reader::set_done,
            py::arg("done") 
        )
        .def("done",&buffer_reader::done)
        .def("mutex",&buffer_reader::mutex)
        .def("nitems_read",&buffer_reader::nitems_read)
        .def("reset_nitem_counter",&buffer_reader::reset_nitem_counter)
        .def("get_sizeof_item",&buffer_reader::get_sizeof_item)
        .def("link",&buffer_reader::link)
        .def("get_tags_in_range",&buffer_reader::get_tags_in_range,
            py::arg("v"), 
            py::arg("abs_start"), 
            py::arg("abs_end"), 
            py::arg("id") 
        )
        ;


    m.def("make_buffer",&gr::make_buffer,
        py::arg("nitems"), 
        py::arg("sizeof_item"), 
        py::arg("link") = gr::block_sptr() 
    );
    m.def("buffer_add_reader",&gr::buffer_add_reader,
        py::arg("buf"), 
        py::arg("nzero_preload"), 
        py::arg("link") = gr::block_sptr(), 
        py::arg("delay") = 0 
    );
    m.def("buffer_ncurrently_allocated",&gr::buffer_ncurrently_allocated);
    m.def("buffer_reader_ncurrently_allocated",&gr::buffer_reader_ncurrently_allocated);
} 
