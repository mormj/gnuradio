/*
 * Copyright 2020 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/* This file is automatically generated using bindtool */

#include <pybind11/pybind11.h>
#include <pybind11/complex.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <gnuradio/digital/ofdm_serializer_vcc.h>

void bind_ofdm_serializer_vcc(py::module& m)
{
    using ofdm_serializer_vcc = gr::digital::ofdm_serializer_vcc;


    py::class_<ofdm_serializer_vcc,
               gr::tagged_stream_block,
               std::shared_ptr<ofdm_serializer_vcc>>(m, "ofdm_serializer_vcc")

        .def(py::init((std::shared_ptr<ofdm_serializer_vcc>(*)(
                          int,
                          const std::vector<std::vector<int>>&,
                          const std::string&,
                          const std::string&,
                          int,
                          const std::string&,
                          bool)) &
                      ofdm_serializer_vcc::make),
             py::arg("fft_len"),
             py::arg("occupied_carriers"),
             py::arg("len_tag_key") = "frame_len",
             py::arg("packet_len_tag_key") = "",
             py::arg("symbols_skipped") = 0,
             py::arg("carr_offset_key") = "",
             py::arg("input_is_shifted") = true)

        .def(py::init((std::shared_ptr<ofdm_serializer_vcc>(*)(
                          const gr::digital::ofdm_carrier_allocator_cvc::sptr&,
                          const std::string&,
                          int,
                          const std::string&,
                          bool)) &
                      ofdm_serializer_vcc::make),
             py::arg("allocator"),
             py::arg("packet_len_tag_key") = "",
             py::arg("symbols_skipped") = 0,
             py::arg("carr_offset_key") = "",
             py::arg("input_is_shifted") = true)

        .def("to_basic_block",
             [](std::shared_ptr<ofdm_serializer_vcc> p) { return p->to_basic_block(); });
}

