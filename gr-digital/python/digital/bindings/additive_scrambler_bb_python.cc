/*
 * Copyright 2020 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/* This file is automatically generated using bindtool */

#include <pybind11/pybind11.h>
#include <pybind11/complex.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <gnuradio/digital/additive_scrambler_bb.h>

void bind_additive_scrambler_bb(py::module& m)
{
    using additive_scrambler_bb    = gr::digital::additive_scrambler_bb;


    py::class_<additive_scrambler_bb,gr::sync_block,
        std::shared_ptr<additive_scrambler_bb>>(m, "additive_scrambler_bb")

        .def(py::init(&additive_scrambler_bb::make),
           py::arg("mask"), 
           py::arg("seed"), 
           py::arg("len"), 
           py::arg("count") = 0, 
           py::arg("bits_per_byte") = 1, 
           py::arg("reset_tag_key") = "" 
        )
        

        .def("mask",&additive_scrambler_bb::mask)
        .def("seed",&additive_scrambler_bb::seed)
        .def("len",&additive_scrambler_bb::len)
        .def("count",&additive_scrambler_bb::count)
        .def("bits_per_byte",&additive_scrambler_bb::bits_per_byte)
        .def("to_basic_block",[](std::shared_ptr<additive_scrambler_bb> p){
            return p->to_basic_block();
        })
        ;


} 
