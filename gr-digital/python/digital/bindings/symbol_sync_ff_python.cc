/*
 * Copyright 2020 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/* This file is automatically generated using bindtool */

#include <pybind11/pybind11.h>
#include <pybind11/complex.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <gnuradio/digital/symbol_sync_ff.h>

void bind_symbol_sync_ff(py::module& m)
{
    using symbol_sync_ff    = gr::digital::symbol_sync_ff;


    py::class_<symbol_sync_ff,gr::block,
        std::shared_ptr<symbol_sync_ff>>(m, "symbol_sync_ff")

        .def(py::init(&symbol_sync_ff::make),
           py::arg("detector_type"), 
           py::arg("sps"), 
           py::arg("loop_bw"), 
           py::arg("damping_factor") = 1.F, 
           py::arg("ted_gain") = 1.F, 
           py::arg("max_deviation") = 1.5F, 
           py::arg("osps") = 1, 
           py::arg("slicer") = gr::digital::constellation_sptr(), 
           py::arg("interp_type") = ::gr::digital::ir_type::IR_MMSE_8TAP, 
           py::arg("n_filters") = 128, 
           py::arg("taps") = std::vector<float>() 
        )
        

        .def("loop_bandwidth",&symbol_sync_ff::loop_bandwidth)
        .def("damping_factor",&symbol_sync_ff::damping_factor)
        .def("ted_gain",&symbol_sync_ff::ted_gain)
        .def("alpha",&symbol_sync_ff::alpha)
        .def("beta",&symbol_sync_ff::beta)
        .def("set_loop_bandwidth",&symbol_sync_ff::set_loop_bandwidth,
            py::arg("omega_n_norm") 
        )
        .def("set_damping_factor",&symbol_sync_ff::set_damping_factor,
            py::arg("zeta") 
        )
        .def("set_ted_gain",&symbol_sync_ff::set_ted_gain,
            py::arg("ted_gain") 
        )
        .def("set_alpha",&symbol_sync_ff::set_alpha,
            py::arg("alpha") 
        )
        .def("set_beta",&symbol_sync_ff::set_beta,
            py::arg("beta") 
        )
        .def("to_basic_block",[](std::shared_ptr<symbol_sync_ff> p){
            return p->to_basic_block();
        })
        ;


} 
