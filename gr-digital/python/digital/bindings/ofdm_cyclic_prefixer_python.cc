/*
 * Copyright 2020 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/* This file is automatically generated using bindtool */

#include <pybind11/pybind11.h>
#include <pybind11/complex.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <gnuradio/digital/ofdm_cyclic_prefixer.h>

void bind_ofdm_cyclic_prefixer(py::module& m)
{
    using ofdm_cyclic_prefixer    = gr::digital::ofdm_cyclic_prefixer;


    py::class_<ofdm_cyclic_prefixer,gr::tagged_stream_block,
        std::shared_ptr<ofdm_cyclic_prefixer>>(m, "ofdm_cyclic_prefixer")

        .def(py::init((std::shared_ptr<ofdm_cyclic_prefixer>(*)(size_t, size_t, int, const std::string&))&ofdm_cyclic_prefixer::make),
           py::arg("input_size"), 
           py::arg("output_size"), 
           py::arg("rolloff_len") = 0, 
           py::arg("len_tag_key") = "" 
        )

        .def(py::init((std::shared_ptr<ofdm_cyclic_prefixer>(*)(int, const std::vector<int>&, int, const std::string&))&ofdm_cyclic_prefixer::make),
           py::arg("input_size"), 
           py::arg("output_size"), 
           py::arg("rolloff_len") = 0, 
           py::arg("len_tag_key") = "" 
        )

        .def("to_basic_block",[](std::shared_ptr<ofdm_cyclic_prefixer> p){
            return p->to_basic_block();
        })
        ;


} 
