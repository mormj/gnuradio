/*
 * Copyright 2020 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/* This file is automatically generated using bindtool */

#include <pybind11/pybind11.h>
#include <pybind11/complex.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <gnuradio/digital/pfb_clock_sync_ccf.h>

void bind_pfb_clock_sync_ccf(py::module& m)
{
    using pfb_clock_sync_ccf    = gr::digital::pfb_clock_sync_ccf;


    py::class_<pfb_clock_sync_ccf,gr::block,
        std::shared_ptr<pfb_clock_sync_ccf>>(m, "pfb_clock_sync_ccf")

        .def(py::init(&pfb_clock_sync_ccf::make),
           py::arg("sps"), 
           py::arg("loop_bw"), 
           py::arg("taps"), 
           py::arg("filter_size") = 32, 
           py::arg("init_phase") = 0, 
           py::arg("max_rate_deviation") = 1.5, 
           py::arg("osps") = 1 
        )
        

        .def("update_gains",&pfb_clock_sync_ccf::update_gains)
        .def("update_taps",&pfb_clock_sync_ccf::update_taps,
            py::arg("taps") 
        )
        .def("taps",&pfb_clock_sync_ccf::taps)
        .def("diff_taps",&pfb_clock_sync_ccf::diff_taps)
        .def("channel_taps",&pfb_clock_sync_ccf::channel_taps,
            py::arg("channel") 
        )
        .def("diff_channel_taps",&pfb_clock_sync_ccf::diff_channel_taps,
            py::arg("channel") 
        )
        .def("taps_as_string",&pfb_clock_sync_ccf::taps_as_string)
        .def("diff_taps_as_string",&pfb_clock_sync_ccf::diff_taps_as_string)
        .def("set_loop_bandwidth",&pfb_clock_sync_ccf::set_loop_bandwidth,
            py::arg("bw") 
        )
        .def("set_damping_factor",&pfb_clock_sync_ccf::set_damping_factor,
            py::arg("df") 
        )
        .def("set_alpha",&pfb_clock_sync_ccf::set_alpha,
            py::arg("alpha") 
        )
        .def("set_beta",&pfb_clock_sync_ccf::set_beta,
            py::arg("beta") 
        )
        .def("set_max_rate_deviation",&pfb_clock_sync_ccf::set_max_rate_deviation,
            py::arg("m") 
        )
        .def("loop_bandwidth",&pfb_clock_sync_ccf::loop_bandwidth)
        .def("damping_factor",&pfb_clock_sync_ccf::damping_factor)
        .def("alpha",&pfb_clock_sync_ccf::alpha)
        .def("beta",&pfb_clock_sync_ccf::beta)
        .def("clock_rate",&pfb_clock_sync_ccf::clock_rate)
        .def("error",&pfb_clock_sync_ccf::error)
        .def("rate",&pfb_clock_sync_ccf::rate)
        .def("phase",&pfb_clock_sync_ccf::phase)
        .def("to_basic_block",[](std::shared_ptr<pfb_clock_sync_ccf> p){
            return p->to_basic_block();
        })
        ;


} 
