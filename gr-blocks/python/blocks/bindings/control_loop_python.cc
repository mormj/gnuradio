/*
 * Copyright 2020 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/* This file is automatically generated using bindtool */

#include <pybind11/pybind11.h>
#include <pybind11/complex.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <gnuradio/blocks/control_loop.h>

void bind_control_loop(py::module& m)
{
    using control_loop    = gr::blocks::control_loop;


    py::class_<control_loop,
        std::shared_ptr<control_loop>>(m, "control_loop")

        .def(py::init<>())
        .def(py::init<float,float,float>(),           py::arg("loop_bw"), 
           py::arg("max_freq"), 
           py::arg("min_freq") 
        )
        .def(py::init<gr::blocks::control_loop const &>(),           py::arg("arg0") 
        )

        .def("update_gains",&control_loop::update_gains)
        .def("advance_loop",&control_loop::advance_loop,
            py::arg("error") 
        )
        .def("phase_wrap",&control_loop::phase_wrap)
        .def("frequency_limit",&control_loop::frequency_limit)
        .def("set_loop_bandwidth",&control_loop::set_loop_bandwidth,
            py::arg("bw") 
        )
        .def("set_damping_factor",&control_loop::set_damping_factor,
            py::arg("df") 
        )
        .def("set_alpha",&control_loop::set_alpha,
            py::arg("alpha") 
        )
        .def("set_beta",&control_loop::set_beta,
            py::arg("beta") 
        )
        .def("set_frequency",&control_loop::set_frequency,
            py::arg("freq") 
        )
        .def("set_phase",&control_loop::set_phase,
            py::arg("phase") 
        )
        .def("set_max_freq",&control_loop::set_max_freq,
            py::arg("freq") 
        )
        .def("set_min_freq",&control_loop::set_min_freq,
            py::arg("freq") 
        )
        .def("get_loop_bandwidth",&control_loop::get_loop_bandwidth)
        .def("get_damping_factor",&control_loop::get_damping_factor)
        .def("get_alpha",&control_loop::get_alpha)
        .def("get_beta",&control_loop::get_beta)
        .def("get_frequency",&control_loop::get_frequency)
        .def("get_phase",&control_loop::get_phase)
        .def("get_max_freq",&control_loop::get_max_freq)
        .def("get_min_freq",&control_loop::get_min_freq)
        ;


    m.def("tanhf_lut",&gr::blocks::tanhf_lut,
        py::arg("x") 
    );
} 
